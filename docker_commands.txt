

# Delete all containers
    docker rm $(docker ps -a -q)
# Delete all images
    docker rmi $(docker images -q)
    
#setup rabbit-mq
    docker run --detach \
--name rabbitmq \
-p 5672:5672 \
-p 15672:15672 \
rabbitmq:3-management

#cleanup
docker system prune -a
#show docker containers running
docker container ls
#stop container
docker stop container_id_or_name

#simple docker file (Dockerfile) (RUN happens during image build, CMD happens after)
FROM debian:jessie
MAINTAINER You <you@example.com>
RUN echo 'Hello World' > /hello.txt
CMD cat /hello.txt

#can build this dockerfile like this
docker image build -t test-image .

#view it using
docker image ls

#run it using
docker container run --rm test-image

#create network
docker network create test
#check it like this
docker network ls

#docker webserver, runs nginx on port 80
docker container run -d --name webserver -p 80:80 nginx
#this is to run nginx via the test network
docker container run -d --network=test --name=web nginx
#this will bind the web to curl
docker container run --rm --network=test appropriate/curl http://web/

#docker volume for persistence if db container goes down, still want to retain the data
docker volume create test
#show it
docker volume ls
#use the volume (rm remove it after use)
docker container run --rm -v test:/my-volume debian:jessie
/bin/bash -c "echo Hello > /my-volume/test.txt"

#test the persistence
docker container run --rm -v test:/my-volume debian:jessie cat /my-volume/test.txt

#connect to say a mongo shell
docker exec -it db_name mongo

#docker push images to docker hub
docker image build -t docker_username/image_name .
docker image push docker_username/image_name    

#logging
docker logs container
#docker remove dangling images (none: none)
docker rmi $(docker images -f "dangling=true" -q)

#pushing to docker hub
#login first
docker login
#tag the image
docker tag c2d81670bf5a user_name/booking_frontend:firsttry
#push it
docker push user_name/booking_frontend

#sometimes pulling from docker hub is slow so better once pulled to save image locally as tar
docker save booking_frontend > booking_frontend.tar
#then when you need to use it
docker load --input booking_frontend.tar

#docker close all containers
docker kill $(docker ps -q)

#docker clean up everything
docker system prune -a
