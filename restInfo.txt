Some good info for building rest / or gPRc / api 
Build a real world "production" REST or gRPC API:

    Scalable, must be able to run more than one instance.
    Dockerized, runnable on minikube.
    Unit tested, must be able to run "go test ./..." directly from clone.
    Integration tested, recommend docker-compose.
    OpenAPI/Swagger (or similar for gRPC) documented.
    dep vendored, but using the standard library often, instead of piling on dependencies.
    Authenticated and Authorized via apikeys and/or user accounts.
    Built and tested via CI: Travis, CircleCi, etc. Recommend Makefile for task documentation.
    Flag & ENV config, API keys, ports, dev mode, etc.
    "why" comments, not "what" or "how" which should be clear through func/variable names and godoc comments.
    Use of Context to limit request time.
    Leveled JSON logging, logrus or similar.
    Postgres/MySQL, sqlx or an ORM.
    Redis/memcache for scalable caching.
    Datadog, New Relic, AppDynamics, etc for monitoring.
    Well documented README.md with separate sections for API user and service developer audiences. Maybe even include graphviz or mermaidJS UML diagrams.
    Clean git history with structured commits and useful messages. No merge master commits.
    Passing go fmt, go lint, or better, go-metalinter in the CI.
