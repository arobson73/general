#create
git init
#status
git status
#for git to track files need to add them to staging area
git add filename filenamex

#if i change a file then use this to check for differences
git diff filename

#to put changes from the staging are to the repo use this
git commit -m "Some description"

#to view commits use this 
git log

#the commit currently on is known as head
git show HEAD

#say you want to go back to original file you edited. You could undo
#the changes you made, but could also do this
git checkout HEAD filename

#if i add an updated file to staging area by mistake then to remove it do
git reset HEAD filename

#if you want to unwind a commit do this (the first 7 chars of the SHA of a previous commit)
git reset commit_SHA	 

#unstage file changes in the staging area
git reset HEAD filename

#to check which branch currently on
git branch

#o create a new branch from the master branch
git branch new_branch

#switch to new branch
git checkout branch_name

#say i make changes to fencing branch, then to merge i would switch back to master branch 
#then merge in the changes. it knows changes to the file are newer so it fast forwards to these new
#changes
git checkout master
git merge fencing

#delete a branch
git branch -d branch_name

#clone a repo
git clone remote_loc clone_name

#a list of git project remotes
git remote -v

#fetch work from the remote to the local copy
git fetch

#to get these new changes into your local branch
git merge origin/master

#to share my branch with someone, or push a local branch to origin remote
git push origin your_branch_name


#summary for github usage
first fork project, then
git remote add name linktoyourfork
git fetch name && git checkout master
#if you make changes
git push name

#say i want to delete a branch
git push --delete remotename branchname
git branch --delete branchname

#remove the head commit
git reset --hard HEAD^

#setup git for commits
git config --global user.email "you@example.com"

#get changes from remote
git pull

#send changes from local to remote
git push remote_name local_branch

#say i want to remove commits roll back. Do it on local, first , then remote step by step
git reset --hard HEAD^
git push -f remote_name local_branch

#setup for vim diff. then do git d, :wq in vim cycles to the next file
git config --global diff.tool vimdiff
git config --global difftool.prompt false
git config --global alias.d difftool



#if you want to get the latest from upstream master


1. Clone your fork:

git clone git@github.com:YOUR-USERNAME/YOUR-FORKED-REPO.git

2. Add remote from original repository in your forked repository:

cd into/cloned/fork-repo
git remote add upstream git://github.com/ORIGINAL-DEV-USERNAME/REPO-YOU-FORKED-FROM.git
git fetch upstream

3. Updating your fork from original repo to keep up with their changes:

git pull upstream master

#############################
#show the last commit and the changes made
git show
git show hash

#save your changes without commiting, or if you need to switch branches, but dont want to commit
git stash
#show the files in the stash
git stash list

#to get the files out of the stash
git stash pop

#if you wanted to move a file to another directory
git mv filename newlocation	

#if you want to rename a file (if commiting use a option - git commit -a -m "whatever change"
git mv filename newfilename

#to remove a file
git rm filename

#say we modify a file locally but want to go back to the original, same if we delete a local file
git checkout filename

#say we add file to staging area but want to take it out of staging area back to local
git checkout HEAD -- filename

#to reset the head pointer with destroying anything (move it back 1)

git reset --soft HEAD~

#same as above but revert the changes in the staging area without destroying
git reset --mixed HEAD~

#to revert changes and delete them
git reset --hard HEAD~

#to tag a commit (with release info for example)
git tag -a 'Release_1_0' -m 'Tagged basic string operation code' HEAD

#to tag remote
git push origin tag Release_1_0

#to view tags 
git tag -l

#to show tagged releases
git show Release_1_0

#to delete tags
git tag -d Release_1_0
git push origin :Release_1_0

#to delete unwanted files and ask / show what will happend before going ahead
git clean -f -d --dry-run
